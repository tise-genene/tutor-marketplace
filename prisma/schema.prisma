// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  role          Role      @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  tutorProfile  TutorProfile?
  studentProfile StudentProfile?
  bookings      Booking[] @relation("StudentBookings")
  tutorBookings Booking[] @relation("TutorBookings")
  reviews       Review[]  @relation("StudentReviews")
  tutorReviews  Review[]  @relation("TutorReviews")
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  notifications   Notification[]
}

model TutorProfile {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio         String?
  subjects    String[]
  education   String[]
  experience  Int       @default(0)
  hourlyRate  Float
  location    String
  availability Json     // Store availability as JSON
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model StudentProfile {
  id        String    @id @default(cuid())
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  grade     String?
  subjects  String[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Booking {
  id          String    @id @default(cuid())
  studentId   String
  student     User      @relation("StudentBookings", fields: [studentId], references: [id])
  tutorId     String
  tutor       User      @relation("TutorBookings", fields: [tutorId], references: [id])
  date        DateTime
  startTime   String
  endTime     String
  status      BookingStatus @default(PENDING)
  subject     String
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Review {
  id          String    @id @default(cuid())
  studentId   String
  student     User      @relation("StudentReviews", fields: [studentId], references: [id])
  tutorId     String
  tutor       User      @relation("TutorReviews", fields: [tutorId], references: [id])
  rating      Int
  comment     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
  
  senderId  String
  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
  
  receiverId String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])

  @@index([senderId])
  @@index([receiverId])
}

enum Role {
  STUDENT
  TUTOR
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum NotificationType {
  NEW_MESSAGE
  NEW_REVIEW
  BOOKING_REQUEST
  BOOKING_CONFIRMED
  BOOKING_CANCELLED
}

model Notification {
  id        String   @id @default(cuid())
  type      NotificationType
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  relatedId String?  // ID of the related entity (message, review, etc.)
  
  @@index([userId])
}
